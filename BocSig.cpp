#include "Sig.h"

float m16[16][3]={
	{28.335865, 28.900759, 36.278469},
{ 72.877136, 83.058578, 60.561787},
{38.237236, 53.838226, 134.08774},
{171.9537, 84.718742, 33.900265},
{121.67605, 122.81996, 120.90321},
{33.721462, 39.518471, 213.36789},
{51.469322, 176.05241, 125.39835},
{109.09044, 117.30019, 194.07394},
{36.22308, 134.55534, 214.38234},
{209.86166, 165.45448, 75.403381},
{173.44032, 170.50882, 176.19197},
{122.87827, 197.17686, 228.53244},
{34.57328, 215.9483, 242.1763},
{226.47388, 213.70258, 170.40399},
{208.99309, 211.61296, 219.39915},
	{248.12537, 248.66795, 247.66434}};

//float m16[16][3]={ 
//{16.046556, 19.382441, 25.015154 },
//{51.834541, 53.155373, 53.101295 },
//{ 31.191847, 51.328392, 106.55045 },
//{130.55528, 88.20871, 36.793201 },
//{ 37.656296, 142.39534, 100.66408 },
//{ 93.503777, 98.627258, 116.70798 },
//{ 41.711033, 24.1507, 202.0984 },
//{ 38.548836, 114.01736, 179.11206 },
//{ 102.46024, 148.73199, 171.77881 },
//{ 216.34378, 152.56715, 51.450363 },
//{ 176.1796, 159.41353, 138.38692 },
//{ 37.544605, 183.78894, 235.64247 },
//{ 179.48868, 56.533981, 238.36894 },
//{ 148.52647, 181.96584, 210.83301 },
//{ 200.51683, 207.28607, 212.60838 },
//{ 239.94284, 242.33691, 242.12611 } };

float m32[32][3]={
	{ 13.789192, 14.927647, 17.280035 },
	{ 21.911638, 35.950813, 54.600227 },
	{ 58.691746, 48.779408, 43.286583 },
	{ 31.693905, 67.475395, 97.540405 },
	{ 76.173302, 76.120811, 92.652039 },
	{ 29.755983, 22.390734, 142.06409 },
	{ 128.39508, 70.08223, 20.109642 },
	{ 108.46355, 108.60188, 35.994392 },
	{ 34.165039, 143.86646, 88.330078 },
	{ 112.30319, 103.60379, 102.62877 },
	{ 76.469429, 101.01595, 138.77991 },
	{ 31.712645, 107.22989, 156.49779 },
	{ 37.720173, 19.976824, 215.26352 },
	{ 120.9958, 128.77139, 140.37222 },
	{ 172.51651, 125.94885, 77.490105 },
	{ 81.566795, 62.687023, 211.91412 },
	{ 70.215843, 179.79507, 152.31512 },
	{ 20.870228, 138.2868, 209.59978 },
	{ 99.776909, 137.56166, 190.06223 },
	{ 159.16806, 156.83539, 149.825 },
	{ 224.65831, 151.19321, 14.110912 },
	{ 218.29868, 170.76314, 103.46757 },
	{ 135.35753, 168.01357, 203.74573 },
	{ 16.032415, 194.37115, 240.95624 },
	{ 197.54701, 52.487183, 241.03419 },
	{ 180.0721, 182.9321, 187.57721 },
	{ 82.800003, 194.83014, 237.34795 },
	{ 158.5244, 197.85231, 227.45674 },
	{ 231.47731, 196.49413, 157.07899 },
	{ 218.87534, 212.13387, 210.90289 },
	{ 191.76407, 217.54539, 233.11212 },
	{ 242.64789, 245.03322, 244.75113 }};

float m64[64][3]={       //imageset-trainSized训练出的dic64
	{21.160107, 22.69784, 25.63007},{23.534285, 34.571903, 96.688568},{56.293926, 55.15271, 57.23399},
	{117.12148, 38.37534, 24.401632},{64.933548, 115.50713, 20.670095},{26.831703, 32.07172, 155.50937},
	{24.276316, 127.43092, 79.006577},{80.572594, 77.318176, 78.42511},{18.291864, 14.316271, 217.45898},
	{53.547554, 79.087257, 123.82991},{148.48399, 79.468307, 41.308796},{83.711693, 142.85812, 60.74007},
	{43.066933, 48.74601, 195.90602},{184.50977, 96.352585, 10.497875},{205.11696, 59.062603, 32.947281},
	{23.012617, 114.54449, 179.30014},{114.37562, 108.46706, 105.46347},{73.054085, 86.569534, 175.32892},
	{14.605804, 181.86578, 153.19226},{94.807709, 116.37624, 143.52892},{26.343451, 91.341202, 238.50027},
	{81.239288, 164.17976, 113.21667},{129.86917, 190.46564, 39.8204},{167.85753, 113.48761, 82.741592},
	{68.632927, 69.037804, 231.36951},{194.44858, 131.38293, 48.169586},{139.98421, 62.808849, 187.07268},
	{51.585659, 220.31076, 118.0757},{64.497833, 145.14684, 187.72981},{234.07906, 153.0981, 14.603221},
	{20.724417, 159.31509, 229.16566},{107.65454, 129.47704, 178.20047},{218.19217, 121.58673, 76.489792},
	{156.31744, 136.42709, 124.37026},{112.6713, 189.8858, 145.89352},{147.8885, 146.75182, 157.14056},
	{100.83598, 125.07805, 231.2561},{59.689304, 184.44737, 214.6579},{231.47975, 176.31323, 62.08461},
	{10.006745, 220.10342, 246.97414},{119.86628, 169.16438, 194.51012},{213.28044, 164.69029, 109.44685},
	{176.75594, 207.26349, 106.63283},{155.83424, 153.20979, 201.36673},{179.57597, 109.42403, 222.19435},
	{198.13849, 162.8672, 154.0629},{173.27954, 176.58583, 167.19308},{93.562378, 187.77118, 235.76585},
	{61.397808, 231.63722, 247.09634},{150.02264, 197.7834, 201.82037},{186.71767, 185.44118, 190.80103},
	{231.99356, 201.10735, 138.21173},{155.86755, 186.6214, 233.82274},{110.82925, 223.19702, 243.55516},
	{204.28253, 202.84799, 202.4068},{223.90942, 213.78648, 174.98563},{206.62582, 174.5257, 239.01976},
	{194.58659, 209.26317, 226.10265},{161.58008, 229.61826, 244.51221},{222.51585, 219.48631, 221.31534},
	{239.51581, 234.92577, 197.62885},{209.02121, 236.34801, 246.21524},{238.43105, 237.26585, 236.16438},
    {252.93953, 253.47552, 253.2845}};

float m256[256][3]={
	{7.09821, 8.34515, 10.546},
{25.0179, 24.3347, 24.8151},
{11.6167, 19.1151, 44.2854},
{55.3271, 27.5876, 15.0822},
{13.4812, 50.0028, 38.6829},
{42.5218, 39.5387, 43.0024},
{22.2822, 34.4402, 68.4805},
{26.6006, 76.4527, 25.2959},
{78.7521, 43.6071, 36.6256},
{59.1972, 55.8151, 59.202},
{97.0051, 48.3613, 9.03253},
{18.3566, 81.8971, 71.1066},
{42.145, 60.8296, 82.7655},
{26.8346, 43.2417, 99.4119},
{11.0145, 10.4776, 112.177},
{51.7204, 100.307, 14.2913},
{75.1278, 69.7428, 69.8889},
{63.275, 71.4181, 93.9153},
{107.29, 65.0763, 47.4407},
{129.504, 31.0931, 25.8467},
{49.0771, 109.501, 63.5928},
{37.8394, 30.6376, 131.528},
{17.9596, 84.9596, 117.116},
{123.604, 75.978, 19.9084},
{86.7418, 115.496, 28.316},
{53.5971, 69.2119, 121.12},
{86.846, 84.3175, 89.9255},
{101.739, 38.8956, 105.348},
{15.3757, 128.618, 85.6301},
{22.4063, 62.8516, 142.766},
{114.843, 85.2678, 75.1904},
{51.7762, 103.872, 114.638},
{48.8239, 158.958, 13.6972},
{27.9297, 27.3747, 163.669},
{78.959, 136.971, 59.5902},
{154.85, 70.1037, 10.6488},
{133.59, 97.0385, 48.9957},
{82.8102, 92.8877, 120.199},
{21.4453, 159.27, 65.9854},
{103.6, 100.664, 98.4598},
{150.89, 79.5252, 46.8353},
{61.5787, 58.5317, 160.856},
{88.2152, 159.861, 12.1392},
{60.0619, 141.781, 98.9757},
{115.12, 140.3, 47.48},
{50.1561, 87.7317, 161.598},
{85.2617, 124.512, 119.315},
{181.728, 57.7896, 39.0259},
{79.1994, 100.145, 147.08},
{9.1577, 7.40531, 195.052},
{19.6814, 109.831, 160.476},
{190.593, 46.1695, 4.45763},
{133.506, 110.527, 97.5401},
{113.812, 114.883, 117.105},
{14.8824, 166.98, 112.161},
{170.19, 104.983, 32.3806},
{125.073, 94.4063, 131.74},
{37.7851, 40.3975, 200.103},
{160.386, 114.377, 69.0366},
{83.3243, 22.2072, 190.216},
{88.3055, 167.956, 87.5491},
{38.4498, 138.079, 152.109},
{176.53, 86.1917, 75.6294},
{61.4798, 127.26, 158.228},
{190.345, 96.1608, 4.96172},
{102.617, 122.152, 141.625},
{8.20818, 152.628, 150.126},
{132.959, 60.424, 160.668},
{124.756, 154.633, 90.8556},
{64.5984, 65.1213, 198.752},
{16.5068, 90.6301, 199.082},
{87.8767, 200.767, 34.5068},
{137.109, 128.14, 119.068},
{73.3354, 158.492, 140.342},
{82.7609, 118.896, 171.709},
{87.7943, 172.263, 117.271},
{198.517, 36.4483, 102.552},
{128.928, 182.739, 43.9855},
{106.038, 121.725, 163.098},
{23.6221, 13.2649, 229.261},
{61.6721, 94.6486, 201.659},
{193.383, 116.742, 50.4586},
{98.6623, 99.2904, 184.729},
{168.045, 131.004, 94.8011},
{220.263, 68.9576, 36.6525},
{132.859, 135.514, 138.212},
{12.5684, 135.265, 191.547},
{37.4639, 184.294, 145.01},
{15.4035, 222.702, 89.0526},
{43.2709, 125.282, 202.56},
{206.515, 127.014, 10.3017},
{155.088, 111.816, 149.754},
{86.4215, 153.955, 169.22},
{123.614, 142.025, 156.489},
{7.15315, 196.081, 147.423},
{173.488, 164.628, 56.7093},
{145.058, 54.4638, 190.971},
{66.461, 200.539, 126.504},
{190.072, 133.803, 81.9952},
{39.9855, 156.773, 186.275},
{56.8745, 52.1301, 235.137},
{163.848, 137.235, 127.747},
{247.071, 41.3929, 6.64286},
{103.394, 137.759, 182.124},
{118.445, 182.142, 129.219},
{219.278, 108.028, 68.8889},
{21.5076, 78.6326, 242.968},
{71.1827, 149.267, 197.815},
{66.3996, 190.4, 161.31},
{11.342, 191.407, 173.784},
{208.132, 145.836, 53.8202},
{90.5363, 120.278, 212.133},
{135.814, 127.721, 181.945},
{136.25, 24.4167, 222.875},
{153.255, 151.895, 149.785},
{157.772, 89.8354, 190.633},
{86.0466, 82.9351, 234.656},
{120.088, 93.3707, 215.893},
{11.047, 154.949, 214},
{114.596, 161.047, 177.998},
{53.6388, 105.102, 240.321},
{186.8, 152.102, 119.188},
{148.617, 221.064, 37},
{10.7253, 124.002, 238.474},
{109.544, 190.392, 156.323},
{47.7021, 238.511, 116.319},
{143.201, 157.802, 166.97},
{129.756, 149.428, 185.017},
{159.558, 183.022, 120.725},
{205.374, 178.708, 9.81287},
{240.592, 127.754, 22.0885},
{163.63, 204.545, 83.5195},
{122.941, 132.137, 207.592},
{61.0958, 146.862, 225.018},
{170.465, 134.61, 170.201},
{100.525, 161.55, 201.801},
{16.828, 178.86, 212.089},
{225.325, 139.467, 88.2639},
{176.01, 163.917, 142.349},
{206.912, 161.728, 97.2649},
{47.3839, 174.746, 217.853},
{203, 88.35, 179.75},
{60.8118, 196.965, 197.071},
{78.6915, 176.234, 211.452},
{39.037, 148.333, 242.451},
{95.9231, 199.013, 183.462},
{166.93, 66.7042, 224.028},
{106.37, 113.255, 242.545},
{157.445, 165.342, 180.759},
{169.834, 169.244, 165.355},
{227.925, 169.118, 70.4664},
{139.917, 171.805, 191.215},
{122.939, 165.802, 208.158},
{6.53333, 166.402, 241.802},
{241.665, 161.681, 47.2926},
{84.7882, 146.335, 241.271},
{239.022, 172.487, 8.60619},
{87.4, 243.267, 142.8},
{150.138, 152.913, 203.783},
{210.145, 197.145, 68.7368},
{151.142, 197.865, 164.743},
{197.869, 153.495, 164.894},
{200.26, 169.952, 146.337},
{181.955, 152.057, 186.452},
{175.217, 120.383, 216.05},
{212.763, 181.172, 118.07},
{141.257, 128.64, 235.801},
{8.57419, 205.277, 224.819},
{133.38, 192.346, 194.883},
{25.6774, 188.187, 240.858},
{230.921, 161.918, 122.783},
{112.452, 164.604, 235.43},
{80.5294, 220.059, 200.804},
{63.7688, 179.422, 243.104},
{32.4485, 215.824, 219.11},
{199.279, 131.651, 196.698},
{186.174, 200.954, 143.946},
{184.682, 92.7576, 230.758},
{106.63, 194.988, 216.398},
{168.302, 154.41, 214.095},
{171.715, 179.586, 191.334},
{55.5692, 205.908, 231.918},
{184.967, 182.756, 178.541},
{80.8132, 200.319, 230.024},
{149.87, 183.222, 212.258},
{3.34127, 198.504, 249.837},
{40.1141, 201.523, 246.272},
{143.832, 162.43, 236.624},
{197.192, 225.452, 116.593},
{92.09, 187.535, 246.31},
{195.617, 165.353, 196.789},
{248.189, 197.712, 62.2703},
{216.809, 187.648, 156.582},
{165.163, 197.093, 202.133},
{136.738, 190.562, 230.654},
{241.825, 198.743, 103.17},
{139.596, 213.628, 208.788},
{66.8069, 209.776, 245.537},
{172.533, 172.474, 222.133},
{8.1497, 219.91, 245.886},
{234.976, 193.794, 133.813},
{40.034, 219.776, 249.109},
{193.054, 194.348, 194.595},
{113.352, 206.614, 241.639},
{201, 212.485, 168.59},
{213.675, 189.296, 181.291},
{203.963, 133.65, 236},
{183.476, 194.233, 209.259},
{90.8717, 218.829, 244.826},
{14.9759, 235.614, 247.169},
{67.9893, 226.882, 248.183},
{158.974, 200.023, 230.468},
{72.3684, 246.263, 230.368},
{196.162, 186.37, 214.697},
{238.548, 190.721, 161.352},
{2.86172, 239.066, 252.894},
{32.9362, 242.638, 249.745},
{47.9818, 244.345, 249.145},
{178.068, 208.174, 222.844},
{210.034, 201.779, 200.057},
{133.859, 218.045, 244.354},
{173.616, 189.587, 243.74},
{195.485, 172.167, 240.314},
{201.372, 206.485, 211.641},
{243.423, 218.375, 147.883},
{60.6617, 249.071, 252.212},
{213.857, 219.103, 190.066},
{105.589, 238.627, 250.749},
{228.241, 184.489, 211.78},
{82.1344, 248.585, 251.174},
{175.207, 230.867, 220.418},
{233.216, 218.007, 176.533},
{197.723, 199.426, 238.068},
{221.977, 243.406, 166.009},
{165.291, 221.135, 246.046},
{239.93, 208.699, 191.124},
{201.015, 215.906, 225.877},
{218.911, 214.127, 213.653},
{226.529, 169.494, 243.976},
{187.893, 216.239, 243.047},
{143.843, 240.748, 250.299},
{221.447, 222.266, 224.23},
{222.801, 204.047, 240.56},
{238.609, 235.102, 196.423},
{239.984, 223.234, 215.481},
{178.321, 245.352, 251.017},
{204.67, 236.593, 243.265},
{230.995, 229.517, 230.334},
{223.047, 223.454, 244.55},
{247.499, 245.453, 217.223},
{239.742, 236.335, 235.966},
{224.045, 244.066, 248.327},
{243.793, 241.28, 245.834},
{243.111, 251.207, 237.697},
{247.958, 250.415, 250.353},
{254.198, 254.393, 254.227},};


BocSig::BocSig(Mat m,const int num)
{
	setClusterNum(num);

	pic=m;

	if(clusterNum==16)
		dic=Mat( 16, 3, CV_32F, m16 );
	else if(clusterNum==32)
		dic=Mat( 32, 3, CV_32F, m32 );
	else if(clusterNum==64)
		dic=Mat( 64, 3, CV_32F, m64 );
	else if(clusterNum==256)
		dic=Mat( 256, 3, CV_32F, m256 );
	else
	{
		cout<<"clusterNum error! "<<endl;
		exit(0);
	}
	
	//cout<<"dic is: "<<dic<<endl;//***************************test dic 16***************************		
	}


void BocSig::process()  
{
	pic=preHandle(pic,128);
	pic.convertTo(pic,CV_32FC3);
	
	int pr=pic.rows;
	int pc=pic.cols;
	
	memset( signature,0,sizeof(signature) );
	
	//****************************************************************************//
	//cout<<pic<<endl<<"pic end"<<endl;//////////////////////////test pic数据///////
	//****************************************************************************//


	for(int i=0;i<pr;i++)
	{
		Vec3f* picPixel=pic.ptr<Vec3f>(i);  ////////////////////注意传入的pic类型
		for(int j=0;j<pc;j++)
		{
			float tmpDis[1000];  //针对pic中的每个像素，存储其与dic中每种颜色的距离
			memset(tmpDis,0,sizeof(tmpDis));
			float minNum=10000000;int posit=0;

			for(int k=0;k<clusterNum;k++)
			{
				Vec3f perColor;
				float* dicPtr=dic.ptr<float>(k);    ////////////////注意传入的dic类型，为1通道3列的Mat！
				perColor[0]=dicPtr[0];
				perColor[1]=dicPtr[1];
				perColor[2]=dicPtr[2];

				//Vec3f* perColor=dic.ptr<Vec3f>(k);
				//cout<<"aaaaaaaa: "<<perColor<<endl;////////////////dic每行一种颜色，perColor为每种颜色


				tmpDis[k]=dis1(picPixel[j], perColor);    ////////////////注意dis1函数形参类型，为Vec3b
				if(tmpDis[k]<minNum)
				{
					minNum=tmpDis[k];
					posit=k;
				}
			}

			//cout<<"posit is"<<posit<<endl;///////////////////////posit test//////////////
			signature[posit]+=1;
		}
	}
}
float* BocSig::getFormalSig(float alpha)
{

	double sum = 0;
	for(int i = 0; i < clusterNum; i++)
	{
		formalSig[i] = pow(signature[i], alpha);
		sum += formalSig[i];
	}
	for(int i = 0; i < clusterNum; i++)
	{
		formalSig[i] = (float)(formalSig[i] / sum);
	}

	cout<<"归一化后"<<endl;/////////////////////////////////////////////////
	for(int i=0;i<clusterNum;i++)
		cout<<setiosflags(ios::fixed)<<setprecision(3)<<formalSig[i]<<" ";
	cout<<endl;

	return formalSig;
}


int main()
{
	//形成描述符
	Mat testPic=imread("38.jpg");
	BocSig s(testPic,256);
	s.process();
	s.getFormalSig(0.5);

	system("pause");
	return 0;
}
